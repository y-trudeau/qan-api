//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const BIT = 57464
const TINYINT = 57465
const SMALLINT = 57466
const MEDIUMINT = 57467
const INT = 57468
const INTEGER = 57469
const BIGINT = 57470
const INTNUM = 57471
const REAL = 57472
const DOUBLE = 57473
const FLOAT_TYPE = 57474
const DECIMAL = 57475
const NUMERIC = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const NAMES = 57508
const CHARSET = 57509
const CURRENT_TIMESTAMP = 57510
const DATABASE = 57511
const CURRENT_DATE = 57512
const CURRENT_TIME = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const UTC_DATE = 57516
const UTC_TIME = 57517
const UTC_TIMESTAMP = 57518
const REPLACE = 57519
const CONVERT = 57520
const CAST = 57521
const GROUP_CONCAT = 57522
const SEPARATOR = 57523
const MATCH = 57524
const AGAINST = 57525
const BOOLEAN = 57526
const LANGUAGE = 57527
const WITH = 57528
const QUERY = 57529
const EXPANSION = 57530
const UNUSED = 57531

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 188,
	79, 584,
	108, 584,
	-2, 41,
	-1, 190,
	79, 607,
	108, 607,
	-2, 43,
	-1, 195,
	108, 485,
	-2, 481,
	-1, 196,
	108, 486,
	-2, 482,
	-1, 616,
	108, 488,
	-2, 484,
	-1, 757,
	5, 22,
	-2, 432,
	-1, 771,
	5, 23,
	-2, 309,
	-1, 945,
	5, 23,
	-2, 433,
	-1, 993,
	5, 22,
	-2, 435,
	-1, 1039,
	5, 23,
	-2, 436,
}

const yyPrivate = 57344

const yyLast = 7910

var yyAct = [...]int{

	362, 38, 543, 863, 602, 1031, 335, 187, 886, 412,
	3, 642, 860, 361, 864, 44, 921, 619, 655, 951,
	161, 411, 714, 414, 826, 834, 721, 155, 775, 615,
	618, 760, 691, 738, 628, 796, 384, 724, 763, 38,
	651, 191, 324, 581, 416, 198, 390, 166, 160, 177,
	170, 400, 181, 43, 225, 1062, 333, 1053, 1059, 1048,
	192, 1057, 156, 157, 158, 159, 1052, 176, 934, 986,
	227, 1047, 202, 175, 1008, 792, 337, 635, 218, 671,
	963, 322, 891, 892, 893, 643, 981, 979, 48, 1056,
	1054, 894, 208, 669, 1032, 816, 582, 1014, 603, 605,
	209, 204, 128, 129, 129, 196, 478, 473, 1006, 50,
	51, 52, 53, 131, 132, 133, 630, 774, 773, 723,
	675, 772, 200, 205, 140, 630, 130, 1024, 180, 668,
	971, 63, 797, 900, 813, 138, 532, 533, 138, 220,
	815, 222, 948, 838, 199, 224, 224, 224, 224, 224,
	224, 779, 636, 786, 224, 542, 431, 138, 138, 213,
	219, 221, 510, 138, 520, 520, 555, 38, 495, 498,
	604, 430, 936, 475, 739, 790, 387, 665, 670, 663,
	386, 1027, 413, 901, 392, 1034, 509, 508, 518, 519,
	511, 512, 513, 514, 515, 516, 517, 510, 673, 676,
	520, 643, 224, 1007, 1005, 967, 629, 224, 223, 217,
	895, 627, 626, 698, 966, 629, 224, 224, 224, 224,
	224, 224, 224, 224, 667, 1046, 211, 696, 697, 695,
	814, 1041, 812, 330, 138, 739, 138, 850, 666, 632,
	138, 426, 805, 483, 633, 804, 138, 570, 571, 793,
	63, 63, 63, 63, 63, 63, 388, 1017, 180, 63,
	672, 518, 519, 511, 512, 513, 514, 515, 516, 517,
	510, 674, 965, 520, 513, 514, 515, 516, 517, 510,
	138, 845, 520, 844, 485, 843, 803, 138, 138, 138,
	496, 899, 63, 497, 496, 41, 497, 496, 323, 1035,
	888, 497, 496, 938, 787, 694, 498, 63, 717, 138,
	498, 138, 63, 498, 138, 1043, 323, 138, 498, 138,
	471, 63, 63, 63, 63, 63, 63, 63, 63, 497,
	496, 215, 529, 531, 509, 508, 518, 519, 511, 512,
	513, 514, 515, 516, 517, 510, 498, 210, 520, 819,
	820, 821, 997, 323, 316, 317, 318, 319, 320, 715,
	541, 716, 321, 545, 546, 547, 548, 549, 550, 551,
	423, 554, 556, 556, 556, 556, 556, 556, 556, 556,
	564, 565, 566, 567, 508, 518, 519, 511, 512, 513,
	514, 515, 516, 517, 510, 997, 998, 520, 181, 181,
	181, 181, 181, 192, 584, 960, 959, 572, 199, 530,
	472, 424, 359, 422, 413, 477, 606, 497, 496, 500,
	880, 323, 181, 601, 486, 487, 488, 489, 490, 491,
	492, 493, 947, 323, 498, 192, 832, 323, 61, 574,
	684, 686, 687, 609, 323, 685, 906, 905, 586, 587,
	1010, 589, 1009, 611, 896, 499, 859, 644, 645, 646,
	597, 428, 607, 729, 608, 585, 193, 943, 588, 573,
	612, 497, 496, 45, 180, 180, 180, 180, 180, 623,
	903, 902, 761, 224, 729, 323, 614, 620, 498, 657,
	180, 397, 323, 599, 600, 63, 433, 432, 180, 832,
	138, 396, 616, 138, 138, 138, 138, 138, 653, 654,
	19, 861, 832, 397, 428, 138, 904, 692, 832, 138,
	780, 19, 761, 138, 397, 397, 568, 138, 138, 41,
	637, 656, 38, 755, 874, 19, 756, 783, 63, 557,
	558, 559, 560, 561, 562, 563, 545, 992, 764, 765,
	580, 652, 647, 55, 659, 601, 41, 226, 226, 226,
	226, 226, 226, 890, 428, 167, 226, 41, 861, 127,
	806, 767, 534, 535, 536, 537, 538, 539, 540, 138,
	693, 41, 758, 759, 138, 481, 770, 138, 63, 718,
	719, 757, 743, 638, 639, 640, 641, 728, 736, 226,
	402, 405, 406, 407, 403, 746, 404, 408, 648, 649,
	650, 41, 594, 616, 226, 747, 592, 595, 17, 226,
	174, 593, 769, 591, 590, 730, 1055, 768, 226, 226,
	226, 226, 226, 226, 226, 226, 781, 1051, 741, 680,
	777, 778, 596, 818, 406, 407, 63, 171, 172, 922,
	794, 795, 1050, 752, 350, 349, 352, 353, 354, 355,
	63, 224, 785, 351, 356, 165, 731, 732, 751, 798,
	735, 924, 429, 620, 216, 391, 789, 1029, 1028, 224,
	799, 800, 801, 771, 742, 325, 744, 745, 726, 389,
	809, 679, 990, 784, 926, 941, 930, 326, 925, 753,
	923, 969, 661, 480, 410, 928, 168, 169, 391, 692,
	750, 162, 63, 1020, 927, 1019, 163, 45, 749, 929,
	931, 989, 761, 1021, 63, 964, 494, 47, 822, 839,
	49, 421, 42, 1, 664, 1030, 690, 885, 625, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 617, 197, 54, 866, 624, 38,
	802, 1004, 192, 862, 962, 63, 63, 631, 867, 791,
	865, 849, 693, 876, 877, 878, 871, 634, 889, 402,
	405, 406, 407, 403, 63, 404, 408, 1026, 870, 764,
	765, 788, 436, 881, 437, 435, 439, 438, 434, 829,
	884, 409, 576, 830, 425, 833, 658, 56, 811, 193,
	810, 883, 662, 841, 842, 203, 528, 846, 748, 186,
	868, 569, 852, 383, 853, 854, 855, 856, 1018, 988,
	897, 898, 63, 848, 882, 620, 552, 620, 737, 909,
	336, 193, 831, 683, 226, 226, 348, 345, 911, 347,
	346, 327, 385, 575, 138, 754, 847, 879, 502, 334,
	181, 917, 933, 935, 63, 63, 920, 932, 919, 808,
	916, 328, 179, 393, 401, 942, 399, 398, 184, 766,
	762, 940, 178, 858, 985, 63, 63, 817, 63, 63,
	939, 1033, 950, 728, 579, 226, 953, 954, 955, 20,
	46, 781, 958, 956, 173, 16, 15, 14, 224, 616,
	13, 24, 138, 915, 12, 11, 138, 10, 9, 8,
	7, 6, 63, 5, 4, 164, 18, 2, 0, 0,
	823, 824, 825, 0, 0, 984, 180, 0, 620, 0,
	0, 63, 0, 0, 866, 977, 0, 994, 944, 945,
	946, 0, 949, 720, 0, 226, 993, 865, 991, 0,
	0, 1002, 0, 0, 0, 138, 0, 740, 0, 1003,
	1011, 511, 512, 513, 514, 515, 516, 517, 510, 0,
	63, 520, 63, 63, 63, 138, 63, 1013, 0, 63,
	0, 0, 0, 866, 360, 38, 1022, 0, 0, 0,
	0, 0, 972, 973, 1023, 0, 865, 0, 0, 0,
	0, 0, 0, 63, 982, 983, 0, 0, 501, 776,
	0, 0, 0, 1037, 136, 0, 882, 154, 192, 1038,
	0, 226, 0, 0, 0, 999, 1000, 1001, 0, 0,
	961, 0, 0, 0, 0, 0, 136, 136, 194, 1049,
	0, 544, 136, 63, 63, 0, 0, 1058, 553, 0,
	0, 913, 914, 0, 0, 0, 63, 1016, 0, 0,
	0, 0, 807, 226, 0, 974, 975, 63, 976, 0,
	0, 978, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 63, 0, 1039, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 1045, 968, 0, 0, 613,
	0, 0, 0, 136, 0, 136, 0, 0, 0, 136,
	63, 135, 0, 0, 0, 136, 0, 0, 63, 836,
	0, 0, 1063, 1064, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 136,
	0, 869, 776, 0, 0, 146, 136, 418, 136, 0,
	0, 0, 0, 0, 0, 681, 682, 0, 688, 689,
	0, 0, 226, 226, 0, 226, 887, 0, 136, 153,
	136, 0, 0, 136, 0, 0, 136, 0, 484, 0,
	19, 39, 21, 22, 0, 0, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 33, 910,
	206, 0, 207, 23, 544, 0, 212, 733, 734, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 836, 141,
	0, 226, 32, 0, 0, 143, 41, 385, 0, 0,
	148, 145, 0, 509, 508, 518, 519, 511, 512, 513,
	514, 515, 516, 517, 510, 0, 395, 520, 0, 0,
	0, 147, 0, 0, 0, 420, 0, 952, 0, 952,
	952, 952, 1060, 957, 0, 0, 226, 0, 0, 0,
	0, 827, 0, 142, 0, 474, 0, 476, 0, 0,
	479, 0, 0, 482, 0, 25, 26, 28, 27, 30,
	226, 912, 144, 149, 150, 151, 152, 0, 31, 34,
	35, 0, 0, 36, 37, 29, 0, 0, 0, 0,
	0, 509, 508, 518, 519, 511, 512, 513, 514, 515,
	516, 517, 510, 0, 0, 520, 0, 0, 0, 0,
	995, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 0, 0, 0, 0, 136,
	0, 194, 136, 136, 136, 136, 136, 0, 40, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 136, 0,
	1025, 0, 418, 0, 0, 0, 136, 136, 840, 0,
	0, 0, 0, 194, 0, 0, 484, 0, 851, 0,
	0, 0, 0, 0, 193, 0, 0, 1040, 0, 0,
	0, 0, 0, 442, 0, 1044, 0, 0, 0, 0,
	872, 0, 0, 873, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 0, 0, 136, 0,
	0, 0, 0, 136, 0, 0, 136, 459, 460, 461,
	462, 463, 464, 465, 0, 466, 467, 468, 469, 470,
	455, 456, 457, 458, 440, 441, 583, 0, 443, 0,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	0, 509, 508, 518, 519, 511, 512, 513, 514, 515,
	516, 517, 510, 0, 610, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 484, 97, 937,
	0, 727, 727, 0, 0, 727, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 544, 0, 106, 93, 727,
	727, 727, 727, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 727, 660, 62, 0, 0, 0,
	677, 0, 0, 678, 0, 72, 509, 508, 518, 519,
	511, 512, 513, 514, 515, 516, 517, 510, 0, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 508, 518, 519, 511, 512, 513, 514, 515,
	516, 517, 510, 0, 0, 520, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 126, 0,
	0, 121, 122, 123, 94, 71, 0, 0, 1036, 544,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 64, 0, 85, 124, 102, 79, 118, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 504, 0, 507, 0, 0, 0,
	194, 0, 521, 522, 523, 524, 525, 526, 527, 0,
	505, 506, 503, 509, 508, 518, 519, 511, 512, 513,
	514, 515, 516, 517, 510, 0, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 484, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 907, 0,
	0, 0, 908, 305, 295, 268, 307, 246, 260, 315,
	261, 262, 289, 234, 276, 97, 258, 0, 249, 229,
	255, 230, 247, 270, 77, 273, 245, 297, 279, 84,
	313, 86, 284, 0, 106, 93, 0, 0, 272, 299,
	274, 294, 267, 290, 239, 283, 308, 259, 287, 309,
	0, 0, 0, 62, 0, 621, 622, 0, 0, 0,
	0, 0, 72, 0, 286, 304, 257, 288, 228, 285,
	0, 232, 235, 314, 302, 252, 253, 782, 0, 0,
	0, 0, 0, 0, 271, 275, 291, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 282, 0,
	0, 0, 236, 233, 0, 269, 194, 0, 0, 238,
	0, 251, 292, 0, 300, 266, 139, 303, 264, 263,
	306, 100, 298, 248, 256, 73, 254, 105, 98, 0,
	281, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 231, 0, 107, 117, 126, 244, 301, 121, 122,
	123, 94, 71, 242, 243, 240, 241, 277, 278, 310,
	311, 312, 293, 237, 0, 0, 296, 280, 64, 0,
	85, 124, 102, 79, 118, 305, 295, 268, 307, 246,
	260, 315, 261, 262, 289, 234, 276, 97, 258, 0,
	249, 229, 255, 230, 247, 270, 77, 273, 245, 297,
	279, 84, 313, 86, 284, 0, 106, 93, 0, 0,
	272, 299, 274, 294, 267, 290, 239, 283, 308, 259,
	287, 309, 0, 0, 0, 62, 0, 621, 622, 0,
	0, 0, 0, 0, 72, 0, 286, 304, 257, 288,
	228, 285, 0, 232, 235, 314, 302, 252, 253, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 291, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	282, 0, 0, 0, 236, 233, 0, 269, 0, 0,
	0, 238, 0, 251, 292, 0, 300, 266, 139, 303,
	264, 263, 306, 100, 298, 248, 256, 73, 254, 105,
	98, 0, 281, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 231, 0, 107, 117, 126, 244, 301,
	121, 122, 123, 94, 71, 242, 243, 240, 241, 277,
	278, 310, 311, 312, 293, 237, 0, 0, 296, 280,
	64, 0, 85, 124, 102, 79, 118, 305, 295, 268,
	307, 246, 260, 315, 261, 262, 289, 234, 276, 97,
	258, 0, 249, 229, 255, 230, 247, 270, 77, 273,
	245, 297, 279, 84, 313, 86, 284, 0, 106, 93,
	0, 0, 272, 299, 274, 294, 267, 290, 239, 283,
	308, 259, 287, 309, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 286, 304,
	257, 288, 228, 285, 0, 232, 235, 314, 302, 252,
	253, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	291, 265, 0, 0, 0, 0, 0, 0, 1012, 0,
	250, 0, 282, 0, 0, 0, 236, 233, 0, 269,
	0, 0, 0, 238, 0, 251, 292, 0, 300, 266,
	139, 303, 264, 263, 306, 100, 298, 248, 256, 73,
	254, 105, 98, 0, 281, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 231, 0, 107, 117, 126,
	244, 301, 121, 122, 123, 94, 71, 242, 243, 240,
	241, 277, 278, 310, 311, 312, 293, 237, 0, 0,
	296, 280, 64, 0, 85, 124, 102, 79, 118, 305,
	295, 268, 307, 246, 260, 315, 261, 262, 289, 234,
	276, 97, 258, 0, 249, 229, 255, 230, 247, 270,
	77, 273, 245, 297, 279, 84, 313, 86, 284, 0,
	106, 93, 0, 0, 272, 299, 274, 294, 267, 290,
	239, 283, 308, 259, 287, 309, 41, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	286, 304, 257, 288, 228, 285, 0, 232, 235, 314,
	302, 252, 253, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 291, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 282, 0, 0, 0, 236, 233,
	0, 269, 0, 0, 0, 238, 0, 251, 292, 0,
	300, 266, 139, 303, 264, 263, 306, 100, 298, 248,
	256, 73, 254, 105, 98, 0, 281, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 231, 0, 107,
	117, 126, 244, 301, 121, 122, 123, 94, 71, 242,
	243, 240, 241, 277, 278, 310, 311, 312, 293, 237,
	0, 0, 296, 280, 64, 0, 85, 124, 102, 79,
	118, 305, 295, 268, 307, 246, 260, 315, 261, 262,
	289, 234, 276, 97, 258, 0, 249, 229, 255, 230,
	247, 270, 77, 273, 245, 297, 279, 84, 313, 86,
	284, 0, 106, 93, 0, 0, 272, 299, 274, 294,
	267, 290, 239, 283, 308, 259, 287, 309, 0, 0,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 286, 304, 257, 288, 228, 285, 0, 232,
	235, 314, 302, 252, 253, 0, 0, 0, 0, 0,
	0, 0, 271, 275, 291, 265, 0, 0, 0, 0,
	0, 0, 918, 0, 250, 0, 282, 0, 0, 0,
	236, 233, 0, 269, 0, 0, 0, 238, 0, 251,
	292, 0, 300, 266, 139, 303, 264, 263, 306, 100,
	298, 248, 256, 73, 254, 105, 98, 0, 281, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 231,
	0, 107, 117, 126, 244, 301, 121, 122, 123, 94,
	71, 242, 243, 240, 241, 277, 278, 310, 311, 312,
	293, 237, 0, 0, 296, 280, 64, 0, 85, 124,
	102, 79, 118, 305, 295, 268, 307, 246, 260, 315,
	261, 262, 289, 234, 276, 97, 258, 0, 249, 229,
	255, 230, 247, 270, 77, 273, 245, 297, 279, 84,
	313, 86, 284, 0, 106, 93, 0, 0, 272, 299,
	274, 294, 267, 290, 239, 283, 308, 259, 287, 309,
	0, 0, 0, 62, 0, 427, 0, 0, 0, 0,
	0, 0, 72, 0, 286, 304, 257, 288, 228, 285,
	0, 232, 235, 314, 302, 252, 253, 0, 0, 0,
	0, 0, 0, 0, 271, 275, 291, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 282, 0,
	0, 0, 236, 233, 0, 269, 0, 0, 0, 238,
	0, 251, 292, 0, 300, 266, 139, 303, 264, 263,
	306, 100, 298, 248, 256, 73, 254, 105, 98, 0,
	281, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 231, 0, 107, 117, 126, 244, 301, 121, 122,
	123, 94, 71, 242, 243, 240, 241, 277, 278, 310,
	311, 312, 293, 237, 0, 0, 296, 280, 64, 0,
	85, 124, 102, 79, 118, 305, 295, 268, 307, 246,
	260, 315, 261, 262, 289, 234, 276, 97, 258, 0,
	249, 229, 255, 230, 247, 270, 77, 273, 245, 297,
	279, 84, 313, 86, 284, 0, 106, 93, 0, 0,
	272, 299, 274, 294, 267, 290, 239, 283, 308, 259,
	287, 309, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 286, 304, 257, 288,
	228, 285, 0, 232, 235, 314, 302, 252, 253, 0,
	0, 0, 0, 0, 0, 0, 271, 275, 291, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	282, 0, 0, 0, 236, 233, 0, 269, 0, 0,
	0, 238, 0, 251, 292, 0, 300, 266, 139, 303,
	264, 263, 306, 100, 298, 248, 256, 73, 254, 105,
	98, 0, 281, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 231, 0, 107, 117, 126, 244, 301,
	121, 122, 123, 94, 71, 242, 243, 240, 241, 277,
	278, 310, 311, 312, 293, 237, 0, 0, 296, 280,
	64, 0, 85, 124, 102, 79, 118, 305, 295, 268,
	307, 246, 260, 315, 261, 262, 289, 234, 276, 97,
	258, 0, 249, 229, 255, 230, 247, 270, 77, 273,
	245, 297, 279, 84, 313, 86, 284, 0, 106, 93,
	0, 0, 272, 299, 274, 294, 267, 290, 239, 283,
	308, 259, 287, 309, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 286, 304,
	257, 288, 228, 285, 0, 232, 235, 314, 302, 252,
	253, 0, 0, 0, 0, 0, 0, 0, 271, 275,
	291, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 282, 0, 0, 0, 236, 233, 0, 269,
	0, 0, 0, 238, 0, 251, 292, 0, 300, 266,
	139, 303, 264, 263, 306, 100, 298, 248, 256, 73,
	254, 105, 98, 0, 281, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 231, 0, 107, 117, 126,
	244, 301, 121, 122, 123, 94, 71, 242, 243, 240,
	241, 277, 278, 310, 311, 312, 293, 237, 0, 0,
	296, 280, 64, 0, 85, 124, 102, 79, 118, 305,
	295, 268, 307, 246, 260, 315, 261, 262, 289, 234,
	276, 97, 258, 0, 249, 229, 255, 230, 247, 270,
	77, 273, 245, 297, 279, 84, 313, 86, 284, 0,
	106, 93, 0, 0, 272, 299, 274, 294, 267, 290,
	239, 283, 308, 259, 287, 309, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	286, 304, 257, 288, 228, 285, 0, 232, 235, 314,
	302, 252, 253, 0, 0, 0, 0, 0, 0, 0,
	271, 275, 291, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 282, 0, 0, 0, 236, 233,
	0, 269, 0, 0, 0, 238, 0, 251, 292, 0,
	300, 266, 139, 303, 264, 263, 306, 100, 298, 248,
	256, 73, 254, 105, 98, 0, 281, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 231, 0, 107,
	117, 126, 244, 301, 121, 122, 123, 94, 71, 242,
	243, 240, 241, 277, 278, 310, 311, 312, 293, 237,
	0, 0, 296, 280, 64, 0, 85, 124, 102, 79,
	118, 97, 0, 0, 722, 0, 332, 0, 0, 0,
	77, 0, 331, 0, 0, 84, 370, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 195,
	350, 349, 352, 353, 354, 355, 0, 0, 72, 351,
	356, 357, 358, 0, 0, 329, 343, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	725, 0, 0, 0, 381, 0, 342, 0, 0, 338,
	339, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 379, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 0, 0, 121, 122, 123, 94, 71, 371,
	380, 377, 378, 375, 376, 374, 373, 372, 382, 365,
	366, 368, 0, 367, 64, 0, 85, 124, 102, 79,
	118, 97, 0, 0, 0, 0, 332, 0, 0, 0,
	77, 0, 331, 0, 0, 84, 370, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 323, 195,
	350, 349, 352, 353, 354, 355, 0, 0, 72, 351,
	356, 357, 358, 0, 0, 329, 343, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	0, 0, 0, 0, 381, 0, 342, 0, 0, 338,
	339, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 379, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 0, 0, 121, 122, 123, 94, 71, 371,
	380, 377, 378, 375, 376, 374, 373, 372, 382, 365,
	366, 368, 0, 367, 64, 0, 85, 124, 102, 79,
	118, 97, 0, 0, 0, 0, 332, 0, 0, 0,
	77, 0, 331, 0, 0, 84, 370, 86, 0, 0,
	106, 93, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 195,
	350, 349, 352, 353, 354, 355, 0, 0, 72, 351,
	356, 357, 358, 0, 0, 329, 343, 0, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	725, 0, 0, 0, 381, 0, 342, 0, 0, 338,
	339, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 379, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 0, 0, 121, 122, 123, 94, 71, 371,
	380, 377, 378, 375, 376, 374, 373, 372, 382, 365,
	366, 368, 19, 367, 64, 0, 85, 124, 102, 79,
	118, 0, 0, 97, 0, 0, 0, 0, 332, 0,
	0, 0, 77, 0, 331, 0, 0, 84, 370, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 363, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 195, 350, 349, 352, 353, 354, 355, 0, 0,
	72, 351, 356, 357, 358, 0, 0, 329, 343, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 381, 0, 342, 0,
	0, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 379, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 126, 0, 0, 121, 122, 123, 94,
	71, 371, 380, 377, 378, 375, 376, 374, 373, 372,
	382, 365, 366, 368, 0, 367, 64, 0, 85, 124,
	102, 79, 118, 97, 0, 0, 0, 0, 332, 0,
	0, 0, 77, 0, 331, 0, 0, 84, 370, 86,
	0, 0, 106, 93, 0, 0, 0, 0, 363, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 195, 350, 349, 352, 353, 354, 355, 0, 0,
	72, 351, 356, 357, 358, 0, 0, 329, 343, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 381, 0, 342, 0,
	0, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 379, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 126, 0, 0, 121, 122, 123, 94,
	71, 371, 380, 377, 378, 375, 376, 374, 373, 372,
	382, 365, 366, 368, 97, 367, 64, 0, 85, 124,
	102, 79, 118, 77, 0, 0, 0, 0, 84, 370,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 195, 350, 349, 352, 353, 354, 355, 0,
	0, 72, 351, 356, 357, 358, 0, 0, 0, 343,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 381, 0, 342,
	0, 0, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 379, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 1061,
	99, 104, 87, 110, 101, 116, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 125, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 126, 0, 0, 121, 122, 123,
	94, 71, 371, 380, 377, 378, 375, 376, 374, 373,
	372, 382, 365, 366, 368, 97, 367, 64, 0, 85,
	124, 102, 79, 118, 77, 0, 0, 0, 0, 84,
	370, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	363, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 195, 350, 349, 352, 353, 354, 355,
	0, 0, 72, 351, 356, 357, 358, 0, 0, 0,
	343, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 0, 0, 0, 0, 381, 0,
	342, 0, 0, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 379,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 126, 0, 0, 121, 122,
	123, 94, 71, 371, 380, 377, 378, 375, 376, 374,
	373, 372, 382, 365, 366, 368, 0, 367, 64, 0,
	85, 124, 102, 79, 118, 97, 0, 0, 0, 835,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 837, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 497, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 126, 97, 0, 121, 122,
	123, 94, 71, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 64, 0,
	85, 124, 102, 79, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 57, 0, 0,
	0, 60, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 0, 0, 121,
	122, 123, 94, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 85, 124, 102, 79, 118, 97, 0, 0, 0,
	417, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 419, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 0, 0, 121,
	122, 123, 94, 71, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 64,
	0, 85, 124, 102, 79, 118, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 126, 0, 0,
	121, 122, 123, 94, 71, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	64, 0, 85, 124, 102, 79, 118, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 126, 97,
	0, 121, 122, 123, 94, 71, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 64, 0, 85, 124, 102, 79, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	577, 0, 0, 578, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 126,
	0, 0, 121, 122, 123, 94, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 85, 124, 102, 79, 118, 97,
	0, 0, 0, 417, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 419,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 415, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 126,
	97, 0, 121, 122, 123, 94, 71, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 64, 0, 85, 124, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	126, 97, 0, 121, 122, 123, 94, 71, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 64, 0, 85, 124, 102, 79, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 837, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 97, 0, 121, 122, 123, 94, 71, 0,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 64, 0, 85, 124, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 419, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 126, 97, 0, 121, 122, 123, 94, 71,
	0, 394, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 64, 0, 85, 124, 102,
	79, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 183, 0,
	0, 107, 117, 126, 0, 97, 121, 122, 123, 94,
	71, 0, 0, 0, 77, 0, 0, 0, 0, 84,
	0, 86, 0, 0, 106, 93, 64, 0, 85, 124,
	102, 79, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	0, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 126, 97, 0, 121, 122,
	123, 94, 71, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 64, 0,
	85, 124, 102, 79, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 139, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 97, 0, 121,
	122, 123, 94, 71, 0, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 64,
	0, 85, 124, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 126, 97, 0,
	121, 122, 123, 94, 71, 0, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	64, 0, 85, 124, 102, 79, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 126, 97,
	0, 121, 122, 123, 94, 71, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 64, 0, 85, 124, 102, 79, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 126,
	97, 0, 121, 122, 123, 94, 71, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 64, 0, 85, 124, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 189, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	126, 0, 0, 121, 122, 123, 190, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 85, 124, 102, 79, 118,
}
var yyPact = [...]int{

	1204, -1000, -154, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 703, 722, -1000,
	-1000, -1000, -1000, -1000, 501, 5189, -16, 10, -3, 7059,
	8, 1144, 7542, -1000, -1000, -1000, -1000, -1000, 529, -1000,
	-1000, -1000, -1000, -1000, 695, 701, 559, 687, 609, -1000,
	-17, 6253, 6898, 7703, -1000, 353, 5, 7542, -122, -20,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7, 7542, -1000,
	7542, -21, 292, -21, 7542, -1000, 51, -1000, -1000, -1000,
	7542, 276, 645, 23, 2514, 2514, 2514, 2514, 2514, 2514,
	-1000, -1000, -1000, 2514, -1000, -1000, -1000, -1000, -1000, -1000,
	390, 667, 4476, 4476, 703, -1000, 529, -1000, -1000, -1000,
	655, -1000, -1000, 121, 6736, 472, 560, -1000, -1000, -1000,
	683, 5741, 6092, 7542, 360, -1000, 2918, 408, -1000, 643,
	-1000, -1000, 92, -1000, 48, -1000, -1000, 443, -1000, 1338,
	265, 2514, -11, 7542, 102, 7542, 2514, -13, 7542, 681,
	535, 7542, -1000, 3524, -1000, 2514, 2514, 2514, 2514, 2514,
	2514, 2514, 2514, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 718, 79, 402, -1000, 4476,
	1673, 477, 477, -1000, -1000, 27, -1000, -1000, 4838, 4838,
	4838, 4838, 4838, 4838, 4838, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 477,
	47, -1000, 4286, 477, 477, 477, 477, 477, 477, 4476,
	477, 477, 477, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 473, -1000, 224, 695, 390, 609, 5902,
	509, -1000, -1000, -37, 7542, -1000, 7381, 6253, 6253, 6253,
	6253, 6253, -1000, 584, 583, -1000, 576, 572, 602, 7542,
	-1000, 438, 390, 5741, 50, 477, -1000, 6575, -1000, -1000,
	-37, 6253, 7542, -1000, -1000, -1000, -1000, -1000, 7381, -1000,
	4476, 3322, 2110, 89, 173, -99, -1000, -1000, 478, -1000,
	478, 478, 478, 478, -74, -74, -74, -74, -1000, -1000,
	-1000, -1000, -1000, 500, -1000, 478, 478, 478, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 499, 499, 499, 479,
	479, 503, -1000, 7542, -1000, 680, 65, -1000, 7542, -1000,
	-1000, 7542, 2514, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 603, 4476, 4476, 374, 4476,
	4476, 83, 4838, 243, 140, 4838, 4838, 4838, 4838, 4838,
	4838, 4838, 4838, 4838, 4838, 4838, 4838, 4838, 4838, 4838,
	304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253,
	-1000, 529, 598, 598, 60, 60, 60, 60, 60, 60,
	1521, 3714, 3322, 431, 348, 4286, 4094, 4094, 4476, 4476,
	4094, 688, 99, 348, 7220, -1000, 390, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4094, 4094, 4094, 4094, 4476, -1000,
	-1000, -1000, 667, -1000, 688, 700, -1000, 636, 621, 4094,
	-1000, 504, 477, -1000, 511, 560, 498, 521, 739, -1000,
	-1000, -1000, -1000, 582, -1000, 546, -1000, -1000, -1000, -1000,
	-1000, 390, -1000, 4, 1, 0, 7220, -1000, 711, 471,
	-1000, -1000, -1000, 348, -1000, 43, -1000, 467, 1908, -1000,
	-1000, -1000, -1000, -1000, -1000, 485, 666, 98, 249, -1000,
	-1000, 648, -1000, 109, -102, -1000, -1000, 191, -74, -74,
	-1000, -1000, 28, 640, 28, 28, 28, 229, -1000, -1000,
	-1000, -1000, 187, -1000, -1000, -1000, 184, -1000, 520, 7220,
	2514, -1000, -1000, 113, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -38, -1000, 2514, -1000,
	606, 83, 220, -1000, -1000, 283, -1000, -1000, 348, 348,
	1421, -1000, -1000, -1000, -1000, 243, 4838, 4838, 4838, 1173,
	1421, 1496, 169, 293, 60, 178, 178, 61, 61, 61,
	61, 61, 877, 877, -1000, -1000, -1000, 390, -1000, -1000,
	-1000, 390, 4094, 465, -1000, -1000, 5028, 35, 477, 4476,
	-1000, 383, 383, 232, 260, 383, 4094, 160, -1000, 4476,
	390, -1000, 383, 390, 383, 383, -1000, -1000, 7542, -1000,
	-1000, -1000, -1000, 446, 518, 7381, 477, -1000, 5560, 7220,
	703, 4476, -1000, -1000, 4476, 482, -1000, 4476, -1000, -1000,
	-1000, -1000, 477, 477, 477, 367, -1000, 703, -1000, 3120,
	2110, -1000, 2110, 7220, -1000, 245, -1000, -1000, 513, 25,
	-1000, -1000, -1000, 400, 28, 28, -1000, 236, 78, -1000,
	-1000, -1000, 427, -1000, 463, 393, 7542, -1000, -1000, -1000,
	7542, -1000, -1000, -1000, -1000, -1000, 7220, -1000, -1000, -1000,
	-1000, -1000, -1000, 1173, 1421, 1251, -1000, 4838, 4838, -1000,
	-1000, 383, 4094, -1000, -1000, 6414, -1000, -1000, 2716, 4094,
	348, -1000, -1000, 544, 304, 544, -132, 459, 94, -1000,
	4476, 227, -1000, -1000, -1000, -1000, -1000, -1000, 711, 6253,
	-1000, 669, 461, 414, -1000, -1000, 3904, 390, 379, 34,
	367, 695, 348, 348, 7220, 348, 7220, 7220, 7220, 5379,
	7220, 695, -1000, 1908, -1000, 352, -1000, 478, -1000, -93,
	717, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 215, 156, -1000, 147, 2514, -1000, -1000,
	676, -1000, 4838, 1421, 1421, -1000, -1000, -1000, -1000, 22,
	390, 390, 478, 478, -1000, 478, 479, -1000, 478, -57,
	478, -58, 390, 390, 477, -129, -1000, 348, 4476, 709,
	460, 665, -1000, 477, -1000, -1000, 515, 7220, 7220, -1000,
	-1000, 342, -1000, 299, 299, 299, 50, -1000, -1000, -1000,
	7220, -1000, 81, -1000, -111, -1000, 398, 396, -1000, 477,
	1421, 2312, -1000, -1000, -1000, 42, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4838, 390, 200, 348, 702, 698,
	715, -1000, 477, -1000, 529, 19, -1000, 7220, -1000, -1000,
	-1000, -1000, -1000, -1000, 117, 651, -1000, 650, -1000, -1000,
	-1000, -39, -1000, -1000, -1000, 96, -1000, -1000, -1000, 4476,
	4476, 7381, 414, 390, 7220, -1000, -1000, 174, -1000, -1000,
	262, -1000, 7220, 390, 24, -145, 348, 410, 408, -1000,
	-1000, -1000, -1000, -39, 620, -1000, 600, -136, -148, -1000,
	-45, -1000, 589, -1000, -47, -142, 477, -146, 4657, -150,
	244, 390, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 927, 9, 618, 926, 925, 924, 923, 921, 920,
	919, 918, 917, 915, 914, 911, 910, 907, 906, 905,
	88, 904, 900, 899, 46, 894, 50, 891, 884, 24,
	119, 26, 37, 688, 883, 21, 67, 49, 882, 38,
	880, 879, 878, 877, 51, 876, 874, 1101, 873, 872,
	4, 31, 871, 859, 858, 855, 56, 233, 853, 850,
	849, 847, 846, 843, 32, 2, 3, 13, 14, 840,
	76, 6, 838, 33, 836, 833, 829, 828, 15, 823,
	36, 821, 20, 42, 820, 19, 43, 28, 12, 7,
	819, 41, 818, 569, 816, 92, 815, 812, 810, 808,
	807, 806, 70, 105, 412, 54, 25, 805, 804, 994,
	29, 44, 23, 801, 27, 208, 22, 16, 798, 797,
	796, 795, 794, 792, 152, 791, 787, 778, 11, 35,
	777, 769, 40, 18, 767, 764, 761, 760, 45, 758,
	34, 756, 755, 754, 30, 17, 738, 8, 737, 735,
	5, 734, 733, 732, 0, 81, 731, 730, 166,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 156, 156, 42, 42, 86, 86, 9,
	9, 90, 90, 90, 108, 108, 10, 10, 10, 10,
	15, 141, 142, 142, 142, 138, 118, 118, 118, 121,
	121, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 137, 137, 124, 124, 132, 132, 133, 133,
	133, 130, 130, 131, 131, 134, 134, 134, 125, 125,
	125, 125, 125, 125, 127, 127, 135, 135, 128, 128,
	128, 129, 129, 136, 136, 136, 136, 136, 126, 126,
	139, 146, 146, 146, 146, 140, 140, 148, 148, 147,
	143, 143, 143, 144, 144, 144, 145, 145, 145, 11,
	11, 11, 11, 11, 151, 149, 149, 150, 150, 12,
	13, 13, 13, 14, 14, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 18, 18, 19, 19, 19, 19,
	19, 157, 20, 21, 21, 22, 22, 22, 26, 26,
	26, 24, 24, 25, 25, 31, 31, 30, 30, 32,
	32, 32, 32, 107, 107, 107, 106, 106, 34, 34,
	35, 35, 36, 36, 37, 37, 37, 49, 49, 85,
	85, 87, 87, 38, 38, 38, 38, 39, 39, 40,
	40, 41, 41, 113, 113, 112, 112, 112, 111, 111,
	43, 43, 43, 45, 44, 44, 44, 44, 46, 46,
	48, 48, 47, 47, 50, 50, 50, 50, 51, 51,
	33, 33, 33, 33, 33, 33, 33, 94, 94, 53,
	53, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 63, 63, 63, 63, 63, 63, 54, 54, 54,
	54, 54, 54, 54, 29, 29, 64, 64, 64, 70,
	65, 65, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 61, 61, 61, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 60, 60, 158, 158, 62, 62, 62, 62, 27,
	27, 27, 27, 27, 116, 116, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 74,
	74, 28, 28, 72, 72, 73, 75, 75, 71, 71,
	71, 56, 56, 56, 56, 56, 56, 56, 56, 58,
	58, 58, 76, 76, 77, 77, 78, 78, 79, 79,
	80, 81, 81, 81, 82, 82, 82, 82, 83, 83,
	83, 55, 55, 55, 55, 55, 55, 84, 84, 84,
	84, 88, 88, 66, 66, 68, 68, 67, 69, 89,
	89, 91, 92, 92, 95, 95, 96, 96, 93, 93,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 98, 98, 98, 99, 99, 100, 100, 100, 101,
	101, 104, 104, 105, 105, 109, 109, 110, 110, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 154, 155, 114, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	8, 8, 6, 1, 1, 1, 3, 0, 4, 5,
	3, 1, 2, 1, 1, 1, 2, 8, 4, 6,
	4, 4, 1, 3, 3, 8, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 4, 5, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 3, 2, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -152, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -154, 7,
	194, 52, -153, 207, -78, 14, -22, 5, -20, -157,
	-20, -20, -20, -20, -141, 52, -100, 118, 69, 116,
	122, -104, 55, -103, 200, 145, 139, 166, 158, 156,
	159, 184, 64, 127, 154, 150, 148, 26, 171, 205,
	149, 143, 144, 170, 31, 202, 33, 135, 169, 165,
	168, 142, 164, 37, 183, 161, 151, 17, 130, 133,
	123, 137, 204, 147, 134, 129, 36, 175, 141, 162,
	136, 152, 153, 167, 140, 163, 138, 176, 206, 160,
	157, 180, 181, 182, 203, 155, 177, -93, 118, 120,
	116, 116, 117, 118, 116, -47, -109, 55, -103, 118,
	116, 105, 159, 111, 178, 117, 31, 137, 116, 179,
	180, 181, 182, 55, -109, -114, -114, -114, -114, -114,
	-2, -82, 16, 15, -5, -3, -154, 6, 19, 20,
	-26, 38, 39, -21, -93, -35, -36, -37, -38, -49,
	-70, -154, -47, 10, -42, -47, -90, -89, 184, 159,
	183, -91, -71, -104, -109, 55, -103, -142, -138, 55,
	117, -47, 194, -96, 121, 116, -47, -47, -95, 121,
	55, -95, -47, 108, -47, 55, 29, 186, 55, 137,
	116, 138, 118, -115, -154, -105, -104, -102, 70, 21,
	23, 173, 73, 105, 15, 74, 104, 195, 111, 46,
	187, 188, 185, 186, 178, 28, 9, 24, 125, 20,
	98, 113, 77, 78, 128, 22, 126, 68, 18, 49,
	10, 12, 13, 121, 120, 89, 117, 44, 7, 107,
	25, 86, 40, 27, 42, 87, 16, 189, 190, 30,
	199, 132, 100, 47, 34, 71, 66, 50, 69, 14,
	45, 88, 114, 194, 43, 6, 198, 29, 124, 41,
	116, 179, 76, 119, 67, 5, 122, 8, 48, 51,
	191, 192, 193, 32, 75, 11, -115, -115, -115, -115,
	-115, -115, -155, 54, -83, 18, 30, -33, -52, 71,
	-57, 28, 22, -56, -53, -71, -69, -70, 105, 106,
	94, 95, 102, 72, 107, -61, -59, -60, -62, 57,
	56, 65, 58, 59, 60, 61, 66, 67, 68, -104,
	-109, -67, -154, 42, 43, 195, 196, 199, 197, 74,
	32, 185, 193, 192, 191, 189, 190, 187, 188, 121,
	186, 100, 194, -79, -80, -33, -78, -2, -20, 34,
	-24, 20, 63, -48, 25, -47, 29, 53, -43, -45,
	-44, -46, 40, 44, 46, 41, 42, 43, 47, -113,
	21, -35, -2, -154, -112, 133, -111, 21, -109, 57,
	-47, -156, 53, 10, 51, -108, -105, 57, 53, 29,
	79, 108, 54, 53, -118, -121, -123, -122, -119, -120,
	156, 157, 105, 160, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 127, 152, 153, 154, 155, 139,
	140, 141, 142, 143, 144, 145, 147, 148, 149, 150,
	151, 55, -115, 118, -47, 71, -47, -115, 119, -47,
	22, 50, -47, -110, -109, -102, -115, -115, -115, -115,
	-115, -115, -115, -115, 8, 89, 70, 69, 86, 53,
	17, -33, -54, 89, 71, 87, 88, 73, 91, 90,
	101, 94, 95, 96, 97, 98, 99, 100, 92, 93,
	104, 79, 80, 81, 82, 83, 84, 85, -94, -154,
	-70, -154, 109, 110, -57, -57, -57, -57, -57, -57,
	-57, -154, 108, -65, -33, -154, -154, -154, -154, -154,
	-154, -154, -74, -33, -154, -158, -154, -158, -158, -158,
	-158, -158, -158, -158, -154, -154, -154, -154, 53, -81,
	23, 24, -82, -155, -26, -58, -104, 58, 61, -25,
	41, -86, 133, -47, -89, -36, -37, -37, -36, -37,
	40, 40, 40, 45, 40, 45, 40, -44, -109, -155,
	-155, -2, -50, 48, 120, 49, -154, -111, -86, -35,
	-47, -114, -91, -33, -105, -110, -102, -143, -144, -145,
	-105, 57, 58, -138, -139, -146, 123, 122, -140, 117,
	27, -134, 66, 71, -130, 176, -124, 52, -124, -124,
	-124, -124, -128, 159, -128, -128, -128, 52, -124, -124,
	-124, -132, 52, -132, -132, -133, 52, -133, -101, 51,
	-47, 22, -97, 114, -151, 112, 173, 159, 64, 28,
	113, 14, 195, 133, 206, 55, 134, -47, -47, -115,
	36, -33, -33, -63, 66, 71, 67, 68, -33, -33,
	-57, -64, -67, -70, 62, 89, 87, 88, 73, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	-57, -57, -57, -57, -116, 55, 57, 55, -56, -56,
	-104, -31, 20, -30, -32, 96, -33, -109, -105, 53,
	-155, -30, -30, -33, -33, -30, -24, -72, -73, 75,
	-104, -155, -30, -31, -30, -30, -80, -83, -92, 18,
	10, 32, 32, -30, -55, 29, 32, -2, -154, -154,
	-51, 11, -40, -39, 50, 51, -41, 50, -39, 40,
	40, -155, 117, 117, 117, -87, -104, -51, -51, 108,
	53, -145, 79, 52, 27, -140, 55, 55, -125, 28,
	66, -131, 177, 58, -128, -128, -129, 104, 29, -129,
	-129, -129, -137, 57, 58, 58, 50, -104, -115, -114,
	-98, -99, 119, 21, 117, 27, 133, -115, 37, 66,
	67, 68, -64, -57, -57, -57, -29, 128, 70, -155,
	-155, -30, 53, -107, -106, 21, -104, 57, 108, -154,
	-33, -155, -155, 53, 51, 21, -155, -30, -75, -73,
	77, -33, -155, -155, -155, -155, -155, -47, -34, 10,
	-88, 50, -89, -66, -68, -67, -154, -2, -84, -104,
	-87, -78, -33, -33, 52, -33, -154, -154, -154, -155,
	53, -78, -105, -144, -145, -148, -147, -104, 55, -127,
	50, 57, 58, 59, 66, 185, 54, -129, -129, 55,
	55, 105, 54, 53, 53, 54, 53, -47, -47, -114,
	-104, -29, 70, -57, -57, -155, -32, -106, 96, -110,
	-31, -117, 105, 156, 127, 154, 150, 170, 161, 175,
	152, 176, -116, -117, 200, -78, 78, -33, 76, -51,
	-35, 26, -88, 53, -155, -155, -155, 53, 108, -155,
	-82, -85, -104, -85, -85, -85, -112, -104, -82, 54,
	53, -124, -135, 173, 8, 57, 58, 58, -115, 25,
	-57, 108, -155, -155, -124, -124, -124, -133, -124, 144,
	-124, 144, -155, -155, -154, -28, 198, -33, -76, 12,
	27, -68, 32, -2, -154, -104, -104, 53, 54, -155,
	-155, -155, -50, -147, -136, 123, 27, 122, 185, 54,
	54, -154, 96, -128, 55, -57, -155, 57, -77, 13,
	15, 8, -66, -2, 108, -104, -126, 64, 27, 27,
	-149, -150, 133, -27, 89, 203, -33, -65, -89, -155,
	-104, 57, -155, 53, -104, -155, 201, 47, 204, -150,
	32, 37, 202, 205, 135, 37, 136, 203, -154, 204,
	-57, 132, 205, -155, -155,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 416, 0, 191,
	191, 191, 191, 191, 0, 476, 458, 0, 0, 0,
	0, 0, 185, 643, 643, 643, 643, 643, 0, 28,
	29, 641, 1, 3, 424, 0, 0, 195, 198, 193,
	458, 0, 0, 0, 46, 0, 0, 634, 0, 456,
	477, 478, 481, 482, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 635, 636, 637, 638, 639, 640, 0, 0, 459,
	0, 454, 0, 454, 0, 164, 262, 485, 486, 634,
	0, 0, 0, 0, 644, 644, 644, 644, 644, 644,
	180, 181, 182, 644, 184, 186, 187, 188, 189, 190,
	22, 428, 0, 0, 416, 24, 0, 191, 196, 197,
	201, 199, 200, 192, 0, 0, 220, 222, 223, 224,
	243, 0, 245, 0, 0, 35, 0, 40, -2, 583,
	-2, 449, 0, 398, 0, -2, -2, 0, 52, 0,
	0, 644, 0, 0, 0, 0, 644, 0, 0, 0,
	0, 0, 163, 0, 165, 644, 644, 644, 644, 644,
	644, 644, 644, 174, 645, 646, 483, 484, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 175, 176, 177, 178,
	179, 183, 23, 642, 18, 0, 0, 425, 270, 0,
	275, 277, 0, 312, 313, 314, 315, 316, 0, 0,
	0, 0, 0, 0, 0, 339, 340, 341, 342, 401,
	402, 403, 404, 405, 406, 407, 408, 279, 280, 398,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 363, 363, 363, 363, 363, 363, 363, 363, 0,
	0, 0, 0, 417, 418, 421, 424, 22, 198, 0,
	203, 202, 194, 37, 0, 261, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 253, 0, 0, 0, 0,
	244, 0, 22, 0, 264, 612, 246, 0, 248, 249,
	37, 0, 0, 33, 34, 643, 44, 45, 0, 42,
	0, 0, 140, 0, 105, 101, 57, 58, 94, 60,
	94, 94, 94, 94, 118, 118, 118, 118, 86, 87,
	88, 89, 90, 0, 73, 94, 94, 94, 77, 61,
	62, 63, 64, 65, 66, 67, 96, 96, 96, 98,
	98, 479, 48, 0, 50, 0, 0, 152, 0, 160,
	455, 0, 644, 263, 487, 488, 166, 167, 168, 169,
	170, 171, 172, 173, 429, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 300, 301, 302, 303, 276, 0,
	290, 0, 0, 0, 332, 333, 334, 335, 336, 337,
	0, 205, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 201, 0, 390, 0, 355, 0, 356, 357, 358,
	359, 360, 361, 362, 0, 205, 0, 0, 0, 420,
	422, 423, 428, 25, 201, 0, 409, 0, 0, 0,
	204, 0, 0, 260, 268, 221, 239, 241, 0, 236,
	251, 252, 254, 0, 256, 0, 258, 259, 225, 226,
	309, 22, 227, 0, 0, 0, 0, 247, 268, 268,
	36, 39, 450, 451, 399, 0, -2, 51, 141, 143,
	146, 147, 148, 53, 54, 0, 0, 0, 0, 135,
	136, 108, 106, 0, 103, 102, 59, 0, 118, 118,
	80, 81, 121, 0, 121, 121, 121, 0, 74, 75,
	76, 68, 0, 69, 70, 71, 0, 72, 0, 0,
	644, 457, 643, 471, 153, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 0, 159, 644, 162,
	0, 271, 272, 274, 291, 0, 293, 295, 426, 427,
	281, 282, 306, 307, 308, 0, 0, 0, 0, 304,
	286, 0, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 331, 374, 375, 0, 329, 330,
	338, 0, 0, 206, 207, 209, 213, 0, 399, 0,
	447, 0, 0, 0, 0, 0, 0, 396, 393, 0,
	0, 364, 0, 0, 0, 0, 419, 19, 0, 452,
	453, 410, 411, 218, 441, 0, 0, -2, 0, 0,
	416, 0, 233, 240, 0, 0, 234, 0, 235, 255,
	257, -2, 0, 0, 0, 0, 231, 416, 32, 0,
	0, 144, 0, 0, 131, 0, 133, 134, 114, 0,
	107, 56, 104, 0, 121, 121, 82, 0, 0, 83,
	84, 85, 0, 92, 0, 0, 0, 480, 49, 149,
	0, 643, 472, 473, 474, 475, 0, 161, 430, 292,
	294, 296, 283, 304, 287, 0, 284, 0, 0, 278,
	343, 0, 0, 210, 214, 0, 216, 217, 0, 205,
	311, 346, 347, 0, 0, 0, 0, 416, 0, 394,
	0, 0, 354, 365, 366, 367, 368, 20, 268, 0,
	26, 0, 441, 431, 443, 445, 0, 22, 0, 437,
	0, 424, 269, 237, 0, 242, 0, 0, 0, 245,
	0, 424, 400, 142, 145, 0, 137, 94, 132, 116,
	0, 109, 110, 111, 112, 113, 95, 78, 79, 122,
	119, 120, 91, 0, 0, 99, 0, 644, 150, 151,
	0, 285, 0, 305, 288, 344, 208, 215, 211, 0,
	0, 0, 94, 94, 379, 94, 98, 382, 94, 384,
	94, 387, 0, 0, 0, 391, 353, 397, 0, 412,
	219, 0, 27, 0, 446, -2, 0, 0, 0, 38,
	30, 0, 229, 0, 0, 0, 264, 232, 31, 130,
	0, 139, 123, 117, 0, 93, 0, 0, 47, 0,
	289, 0, 345, 348, 376, 118, 380, 381, 383, 385,
	386, 388, 350, 349, 0, 0, 0, 395, 414, 0,
	0, 444, 0, -2, 0, 439, 438, 0, 238, 265,
	266, 267, 228, 138, 128, 0, 125, 127, 115, 97,
	100, 0, 212, 377, 378, 369, 352, 392, 21, 0,
	0, 0, 434, 22, 0, 230, 55, 0, 124, 126,
	0, 155, 0, 0, 0, 0, 415, 413, 442, -2,
	440, 129, 154, 0, 0, 351, 0, 0, 0, 156,
	0, 370, 0, 373, 0, 371, 0, 0, 0, 0,
	0, 0, 372, 157, 158,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 207,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:274
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:279
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:303
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:311
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:322
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:349
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:361
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:412
		{
			yyVAL.partitions = nil
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:416
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:426
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:447
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:452
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:467
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:474
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:496
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:670
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:684
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:689
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:693
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:711
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:742
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:751
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:755
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.optVal = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:785
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:789
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:794
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:820
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.colKeyOpt = colKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:837
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:847
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:857
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:881
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:885
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:891
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:896
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:900
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:904
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:916
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:920
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:926
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:934
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:944
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:949
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:954
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:958
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:964
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:974
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:980
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:984
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:990
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:996
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1004
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1009
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.statement = &OtherRead{}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.statement = &OtherRead{}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &OtherRead{}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1146
		{
			setAllowComments(yylex, true)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.bytes2 = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = UnionStr
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = UnionAllStr
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = UnionDistinctStr
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = SQLCacheStr
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.str = DistinctStr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = StraightJoinHint
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.selectExprs = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1372
		{
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.empty = struct{}{}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.str = JoinStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.str = JoinStr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.str = JoinStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.str = StraightJoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.str = LeftJoinStr
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.str = LeftJoinStr
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.str = RightJoinStr
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = RightJoinStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.str = NaturalJoinStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.indexHints = nil
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.expr = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = IsNullStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.str = IsNotNullStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.str = IsTrueStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.str = IsNotTrueStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.str = IsFalseStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.str = IsNotFalseStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.str = EqualStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.str = LessThanStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = GreaterThanStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.str = LessEqualStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.str = GreaterEqualStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.str = NotEqualStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1806
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 345:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 351:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.str = BooleanModeStr
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.str = QueryExpansionStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = nil
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.str = string("")
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &NullVal{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2127
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.exprs = nil
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.expr = nil
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.orderBy = nil
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.str = AscScr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.str = AscScr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.str = DescScr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.limit = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.str = ForUpdateStr
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.str = ShareModeStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2260
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.updateExprs = nil
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.byt = 0
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.byt = 1
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.str = IgnoreStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2629
		{
			decNesting(yylex)
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2634
		{
			forceEOF(yylex)
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2639
		{
			forceEOF(yylex)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2643
		{
			forceEOF(yylex)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2647
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
